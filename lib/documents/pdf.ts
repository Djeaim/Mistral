import PDFDocument from 'pdfkit';

type Company = {
  company_name: string;
  company_address: string;
  company_zip?: string | null;
  company_city?: string | null;
  company_country?: string | null;
  company_vat_number?: string | null;
  company_registration?: string | null;
};

type Customer = {
  company_name: string;
  address?: string | null;
  city?: string | null;
  zip?: string | null;
  country?: string | null;
  vat_number?: string | null;
};

type Line = { description: string; quantity: number; unit_price: number; line_total_ht: number };

export async function renderPdf(params: {
  kind: 'quote' | 'invoice';
  number: string;
  issue_date: string; // ISO date
  due_or_valid?: string | null; // due date for invoice, valid_until for quote
  currency: string;
  totals: { total_ht: number; total_tva: number; total_ttc: number };
  lines: Line[];
  company: Company;
  customer: Customer;
}): Promise<Buffer> {
  const doc = new PDFDocument({ size: 'A4', margin: 50 });
  const chunks: Buffer[] = [];
  doc.on('data', (c) => chunks.push(c as Buffer));
  const title = params.kind === 'quote' ? 'Devis' : 'Facture';

  doc.fontSize(20).text(`${title} ${params.number}`, { align: 'right' });
  doc.moveDown();

  // Company block
  doc.fontSize(12).text(params.company.company_name);
  doc.text(params.company.company_address);
  const compCityLine = [params.company.company_zip, params.company.company_city].filter(Boolean).join(' ');
  if (compCityLine) doc.text(compCityLine);
  if (params.company.company_country) doc.text(params.company.company_country);
  if (params.company.company_vat_number) doc.text(`TVA: ${params.company.company_vat_number}`);
  if (params.company.company_registration) doc.text(`Reg.: ${params.company.company_registration}`);

  // Customer block
  doc.moveDown();
  doc.fontSize(12).text(params.customer.company_name, { continued: false });
  if (params.customer.address) doc.text(params.customer.address);
  const custCityLine = [params.customer.zip, params.customer.city].filter(Boolean).join(' ');
  if (custCityLine) doc.text(custCityLine);
  if (params.customer.country) doc.text(params.customer.country);
  if (params.customer.vat_number) doc.text(`TVA: ${params.customer.vat_number}`);

  // Meta
  doc.moveDown();
  doc.text(`Date d'émission: ${params.issue_date}`);
  if (params.due_or_valid) doc.text(`${params.kind === 'invoice' ? "Échéance" : "Validité"}: ${params.due_or_valid}`);

  // Table header
  doc.moveDown();
  doc.fontSize(12).text('Description', 50, doc.y, { continued: true });
  doc.text('Qté', 300, undefined, { continued: true });
  doc.text('PU', 350, undefined, { continued: true });
  doc.text('Total HT', 420);
  doc.moveTo(50, doc.y).lineTo(545, doc.y).stroke();

  // Lines
  for (const l of params.lines) {
    doc.text(l.description, 50, doc.y + 5, { width: 240 });
    doc.text(String(l.quantity), 300, undefined);
    doc.text(formatMoney(l.unit_price, params.currency), 350, undefined);
    doc.text(formatMoney(l.line_total_ht, params.currency), 420, undefined);
  }

  // Totals
  doc.moveDown();
  doc.text(`Total HT: ${formatMoney(params.totals.total_ht, params.currency)}`, { align: 'right' });
  doc.text(`TVA: ${formatMoney(params.totals.total_tva, params.currency)}`, { align: 'right' });
  doc.text(`Total TTC: ${formatMoney(params.totals.total_ttc, params.currency)}`, { align: 'right' });

  // Footer
  doc.moveDown();
  doc.fontSize(9).fillColor('gray').text('Document generated by Mistral', { align: 'center' });

  doc.end();
  return await new Promise<Buffer>((resolve) => {
    doc.on('end', () => resolve(Buffer.concat(chunks)));
  });
}

function formatMoney(n: number, currency: string) {
  try {
    return new Intl.NumberFormat('fr-FR', { style: 'currency', currency }).format(n);
  } catch {
    return `${n.toFixed(2)} ${currency}`;
  }
}


